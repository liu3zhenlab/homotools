#!/usr/bin/perl -w
# geneseq.pl
# Author: Sanzhen Liu
# Date: 3/19/2021

use strict;
use warnings;
use Getopt::Long;
use Term::ANSIColor qw(:constants);
#use File::Temp;
use FindBin;
use lib "$FindBin::Bin/lib";
use genegtfadjust;

my $extension_5p = 0;
my $extension_3p = 0;
my $prefix = "GS";
my ($fas, $gtf, $gene, $transcript, $help);
my $result = &GetOptions("fas|f=s"        => \$fas,
                         "gtf|i=s"        => \$gtf,
                         "gene|g=s"       => \$gene,
                         "ext5|e=i"       => \$extension_5p,
                         "ext3|x=i"       => \$extension_3p,
                         "transcript|t=s" => \$transcript,
                         "prefix|p=s"     => \$prefix,
                         "help|h"         => \$help
);

### print help information if errors occur:
if ($help or !defined $fas or !defined $gtf or !defined $gene) {
	&errINF;
	exit;
}

###############################################
## preparation
################################################
# create a directory for outputs
if (-d $prefix) {
	print STDERR RED, "Warning: the directory $prefix exists.\n", RESET;
} else {
	`mkdir $prefix`;
}

# script path:
#my $scriptPath = $FindBin::Bin;
#my $utilsPath = $scriptPath."/utils/";

&runreport("Start to run geneseq");

##############################################
# intermediate output
###############################################
my $ori_gtf_out = $prefix."/".$prefix.".1.".$gene.".original.gtf";
open(ORIGTF, ">", $ori_gtf_out) || die;

my $transcripts_dir = $prefix."/".$prefix.".2.transcripts";
if (!-d $transcripts_dir) {
	`mkdir $transcripts_dir`;
}
#my $adjpos_prefix = $transcripts_dir."/".$gene;
my $adjpos_prefix = $transcripts_dir."/";

my $gene_fas_out = $prefix."/".$prefix.".3.".$gene.".fasta";

##############################################
#1	gramene	transcript	44289	49837	.	+	.	gene_id "Zm00001d027230"; transcript_id "Zm00001d027230_T001"; gene_source "gramene"; gene_biotype "protein_coding"; transcript_source "gramene"; transcript_biotype "protein_coding";
#exon
#CDS

###########################################
# open GTF file and read gene information
###########################################
my ($gene_name, $gene_start, $gene_end, $gene_strand);
my ($chromosome, %transcripts);
my $gene_found = 0;
open(GTF, "<", $gtf) || die;
while (<GTF>) {
	if (!/^$/ and !/^#/) { # nonempty lines
		chomp;
		my @line = split(/\t/, $_);
		my $info = $line[8];
		if ($info =~ /gene_id \"(.+?)\";/) {
			$gene_name = $1;
			if ($gene_name eq $gene) {
				if (!defined $chromosome) {
					$chromosome = $line[0];
				}
				print ORIGTF "$_\n";
				$gene_found = 1;
				$gene_strand = $line[6];
				if ($gene_strand eq "+") {
					if (!defined $gene_start) {
						$gene_start = $line[3];
						$gene_end = $line[4];
					} else {
						$gene_start = &min($gene_start, $line[3]);
						$gene_end = &max($gene_end, $line[4]);
					}
				} else {
					if (!defined $gene_start) {
						$gene_start = $line[4];
						$gene_end = $line[3];
					} else {
						$gene_start = &max($gene_start, $line[3]);
						$gene_end = &min($gene_end, $line[4]);
					}
				}
			} elsif ($gene_found) { # when gene name does not match input gene name
				&runreport("Gene was found in GTF");
				last;
			}
		}
	}
}
close GTF;
close ORIGTF;

# output adjusted GTF and BED
if ($gene_strand eq "+") {
	$gene_start -= $extension_5p;
	$gene_end += $extension_3p;
} elsif ($gene_strand eq "-") {
	$gene_start += $extension_5p;
	$gene_end -= $extension_3p;
}

if (!$gene_found) {
	&runreport("Gene are NOT found in GTF");
	print STDERR RED, "Exit\n", RESET;
	exit;
} else {
	# adjust position to a newly defined start for gene information in a GTF
	# and output a position-adjusted GTF and BED file for each transcript
	genegtfadjust::genegtfadjust($ori_gtf_out, $gene_start, $adjpos_prefix, $gene);
}

###########################################
### chromosome sequence
###########################################
my ($seq_name, $seq, $seq_len, $chr_seq);
my $chromosome_found = 0;
my %seq;
open(FAS, "<", $fas) || die;
while (<FAS>) {
	chomp;
	if (/^>(\S+)/) {
		if (defined $seq_name) {
			if ($seq_name eq $chromosome) {
				$chr_seq = $seq;
				$chromosome_found = 1;
				last;
			}
		}
		$seq_name = $1;
		$seq = '';
	} else {
		$seq .= $_;
	}
}
# last sequence:
if ((!$chromosome_found) and ($seq_name eq $chromosome)) {
	$chr_seq = $seq;
	$chromosome_found = 1;
}
close FAS;

if ($chromosome_found) {
	&runreport("chromosome/target sequence found");	
} else {
	print STDERR RED, "no chromosome/target sequence found\n", RESET;
	exit;
}

$seq_len = length($chr_seq);  # chromosome length
if (($gene_start > $seq_len) or ($gene_end > $seq_len)) {
	print STDERR RED, "extension beyond the chromosome range\n", RESET;
	exit;
}

###########################################
# gene sequence
###########################################
my $gene_seq;
if ($gene_end > $gene_start) {
	# strand +
	$gene_seq = substr($chr_seq, $gene_start - 1, $gene_end - $gene_start + 1);
} else {
	# strand -
	$gene_seq = substr($chr_seq, $gene_end - 1, $gene_start - $gene_end + 1);
	$gene_seq = &revcom($gene_seq);
}

open(GENEFAS, ">", $gene_fas_out) || die;
#print GENEFAS ">$gene\($gene_strand\)\n";
print GENEFAS ">$gene\n";
# print in a certain length per line
while (my $chunk = substr($gene_seq, 0, 80, "")) {
	print GENEFAS "$chunk\n";
}
close GENEFAS;

&runreport("Gene sequence produced");

###########################################
# modules
###########################################
### reverse and complementary
sub revcom {
	my $inseq = shift @_; 
	my $revcom = reverse($inseq);
	$revcom =~ tr/AGCTagct/TCGAtcga/;
	return $revcom;
}

### funtion to report running return
sub runreport {
	my $injob = shift;
    my $dateinfo = `date +'o %Y-%m-%d %H:%M:%S'`;
	print STDERR MAGENTA, "$dateinfo", RESET;
	print STDERR "  $injob.\n";
	#print LOG "$dateinfo  ";    
	#print LOG "  $injob.\n";
}

### minimum value
sub min {
	my @order_num = sort {$a <=> $b} @_;
	return $order_num[0];
}

### maximum value
sub max {
	my @order_num = sort {$b <=> $a} @_;
	return $order_num[0];
}


### Usage information
sub errINF {
	print <<EOF;
Usage: geneseq --fas <fasta> [--feature <str> or --list <file>]
- extract fasta sequence and gtf information for the input gene
- and produce a new gtf with adjusted positions relative to gene fasta
[Options]
  --fas|f <file>     : reference fasta file (required)
  --gene <str>       : gene name (required)
  --gtf <file>       : GTF file (required)
  --ext5 <num>       : bp extension from 5' site ($extension_5p)
  --ext3 <num>       : bp extension from 3' site ($extension_3p)
  --transcript <str> : transcript (optional)
  --prefix <str>     : prefix name for outputs ($prefix)
  --help             : help information
EOF
	exit;
}

