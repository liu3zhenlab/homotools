#!/usr/bin/perl -w
#======================================================================
# homograph
#
# Author: Sanzhen Liu <liu3zhen@ksu.edu>
# 8/27/2021
#
# The Perl script to plot a haplotype graph
#======================================================================

use strict;
use warnings;
use Getopt::Long;
use File::Temp;
use Term::ANSIColor qw(:constants);
use FindBin;
use lib "$FindBin::Bin/lib";
#use genegtfadjust;
#use maxbed;

my $version = "0.2.3";

my $prefix = "hgout";
my $threads = 1;
my $minigraph_para ="-xggs -t1 -j 0.2 -l 100";
my $cdhit_para = "-g 1 -s 0.8 -c 0.8 -r 0";
my $pggb_para_p_s = "-p 90 -s 1000";
my $main_label = "haplotype graph";
my $refgap_prop = 0.02;
my $nonrefgap_prop = 0.05;
my $maxseg_prop = 0.5;

# $refgap_prop $nonrefgap_prop $maxseg_prop $main_label $gene_gtf

sub prompt {
    print <<EOF;
    Usage: perl $0 --dir <dir_containing_fasta_files> [options]
    [Options]
    --dir <path>      path to a collection of fasta files with suffix of .fa, .fas, or .fasta; required
    --ref <file>      fasta file of the reference sequence; required
    --mgpara <str>    minigraph parameters ($minigraph_para)
    --cdhitpara <str> parameters for cd-hit-est ($cdhit_para)
    --pggbpara <str>  parameters for -p and -s in pggb ($pggb_para_p_s)
    --gene_gtf <file> gtf file of gene structure using coordinates on --ref; optional
    --threads <num>   number of threads ($threads)
    --prefix <str>    prefix of outputs ($prefix)
    --main_label <float>     label to add as the title of haplotype plotting figure ($main_label)
    --refgap_prop <float>    ratio of each gap between segments to the canvas x length ($refgap_prop)
    --nonrefgap_prop <float> ratio of each gap between segments to the canvas x length ($nonrefgap_prop)
    --maxseg_prop <float>    proprotion of the maxium fragment that will not be shortened segments to the canvas x length ($maxseg_prop)
    --version         version information
    --help:           help information
EOF
exit;
}

###############################################
# parameters:
###############################################
my %opts = ();
my ($query, $db);

&GetOptions(\%opts, "dir=s", "ref=s", "mgpara=s", "gene_gtf=s",
                    "threads=i", "prefix=s", "main_label=s",
					"refgap_prop=f", "nonrefgap_prop=f", "maxseg_prop=f",
                    "cdhitpara=s", "pggbpara=s",
					"version", "help");

if (exists $opts{version}) {
	print "$version\n";
	exit;
}

&prompt if exists $opts{help} or !%opts;

my ($fas_dir, $fasta_files, $nfasta, $ref);
if ((!exists $opts{dir}) or (!exists $opts{ref})) {
	print STDERR RED, "--dir and --ref are required\n", RESET;
	&prompt;
} else {
	$fas_dir= $opts{dir};
	if (!-d $fas_dir) {
		print STDERR RED, "$fas_dir does not exist\n", RESET;
		exit;
	} else {
		#$fasta_files=`find $fas_dir -mindepth 1 -maxdepth 1 -name "*.[fa|fas|fasta]" | tr "\n" " "`;
		$fasta_files=`find $fas_dir -mindepth 1 -maxdepth 1 \\( -name "*\\.fa" -o -name "*\\.fas" -o -name "*\\.fasta" \\) | tr "\n" " "`;
		chomp $fasta_files;
		
		# number of fasta files
		if ($fasta_files eq "") {
			print STDERR RED, "no fasta files found in $fas_dir\n", RESET;
			exit;
		}
	}

	$ref = $opts{ref};
	if (!-f $ref) {
		print STDERR RED, "$ref does not exist\n", RESET;
		exit;
	}
}

$prefix = $opts{prefix} if exists $opts{prefix};
$threads = $opts{threads} if exists $opts{threads};
$minigraph_para = $opts{mgpara} if exists $opts{mgpara};
$refgap_prop = $opts{refgap_prop} if exists $opts{refgap_prop};
$nonrefgap_prop = $opts{nonrefgap_prop} if exists $opts{nonrefgap_prop};
$maxseg_prop = $opts{maxseg_prop} if exists $opts{maxseg_prop};
my $gene_gtf = "NULL";
$gene_gtf = $opts{gene_gtf} if exists $opts{gene_gtf};

###############################################
# check requirments
###############################################
&cmd_check("minigraph");
&cmd_check("Rscript");
&cmd_check("sed");
&cmd_check("awk");
&cmd_check("minigraph");
&cmd_check("cd-hit-est");
&cmd_check("pggb");

&runreport("Requirement checked");

###############################################
# preparation
###############################################
# create a directory for outputs
if (-d $prefix) {
	print STDERR RED, "Warning: the directory $prefix exists.\n", RESET;
	#`rm -rf $prefix`;
} else {
	`mkdir $prefix`;
}

# script path:
my $scriptPath = $FindBin::Bin;
my $utilsPath = $scriptPath."/utils/";


&runreport("step 01: prepare to run homograph");

###############################################
# intermediate output
###############################################
# GFA output
my $gfa_outfile = $prefix."/".$prefix.".1.gfa";

# PDF plotting
my $plot_pdf = $prefix."/".$prefix.".2.minigraph.pdf";

# cd-hit output prefix
my $cdhit_infasta = $prefix."/".$prefix.".3.cdhit.in.fasta";
my $cdhit_out = $prefix."/".$prefix.".3.cdhit.out";
#my $cdhit_out_ncluster = $cdhit_out.".ncluster";
#my $cdhit_out_fasta = $cdhit_out.".fasta";

# pggb output
my $pggb_infile = $prefix.".4.pggb.in.fasta";
my $pggb_infasta = $prefix."/".$pggb_infile;
my $pggb_out = $prefix."/".$prefix.".4.pggb.out";

###############################################
# minigraph to gfa
###############################################

&runreport("step 02: run minigraph and plot");

`minigraph $minigraph_para $ref $fasta_files >$gfa_outfile 2>/dev/null`;

if (-f $gfa_outfile) {
	my $num_sl_lines = `grep "^[S|L]" -c $gfa_outfile`;
	chomp $num_sl_lines;
	if ($num_sl_lines == 0) {
		print STDERR RED, "no valid gfa was produced\n", RESET;
		exit;
	}
} else {
	print STDERR RED, "no gfa was produced", RESET;
	exit;
}
###############################################
# my gfa plotting
###############################################
my $gfashow_r = $utilsPath."/gfashow.R";
#print "$gfa_outfile\n";
#print "$refgap_prop\n";
#print "$nonrefgap_prop\n";
#print "$maxseg_prop\n";
#print "$main_label\n";
#print "$gene_gtf\n";
`Rscript $gfashow_r $gfa_outfile $refgap_prop $nonrefgap_prop $maxseg_prop "$main_label" $gene_gtf $plot_pdf`;

###############################################
# cd-hit haplotypes
###############################################

&runreport("step 03: run cd-hit to determine order of sequences");

`cat $fasta_files $ref > $cdhit_infasta`;
#my $cdhit_para = "-g 1 -s 0.8 -c 0.8 -r 0";
`cd-hit-est -i $cdhit_infasta -o $cdhit_out $cdhit_para`;

# modify sequence names for pggb
`perl $utilsPath/cdhit2pggb.pl --fasta $cdhit_infasta --clust $cdhit_out.clstr > $pggb_infasta`;
my $ncluster = `grep "^>Cluster" -c $cdhit_out.clstr`;
chomp $ncluster;

###############################################
# pggb
###############################################

&runreport("step 04: run pggb");

# index
`samtools faidx $pggb_infasta`;

# pggb
my $pggb_para = $pggb_para_p_s." -n $ncluster -U -v -L";
`pggb -i $pggb_infasta -o $pggb_out $pggb_para`;
`cp $pggb_out/$pggb_infile*viz_inv.png $prefix/$pggb_infile.alignments.png`;
`cp $pggb_out/$pggb_infile*lay.draw_mqc.png $prefix/$pggb_infile.gfa.layplot.png`;

###############################################
#
###############################################

&runreport("step 05: finish running");

###############################################
# module 1: check command availability
###############################################
sub cmd_check {
	my $cmd = shift;
	my $cmdPath=`which $cmd 2>/dev/null`;
	if (!$cmdPath) {# not founded
		print STDERR RED, "  $cmd is not found\n", RESET;
		print STDERR RED, "Exit\n", RESET;
		exit;
	}
}

###############################################
# module 2: report running result
###############################################
# funtion to report running return
sub runreport {
	my $injob = shift;
    my $dateinfo = `date +'o %Y-%m-%d %H:%M:%S'`;
	print STDERR MAGENTA, "$dateinfo", RESET;
	print STDERR "  $injob.\n";
	#print LOG "$dateinfo  ";    
	#print LOG "  $injob.\n";
}

