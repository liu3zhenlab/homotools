#!/usr/bin/perl -w
# ====================================================================================================
# File: homograph_msa2block
# Author: Sanzhen Liu
# Date: 3/9/2023
# ====================================================================================================

use strict;
use warnings;
use Getopt::Long;

my $help;
my $outdir = ".";
my $prefix = "spv";
my $outfas = $prefix.".block.fasta";
my $outblocktype = $prefix.".blocktypes.txt";
my $absence_char = "-";

sub prompt {
    print <<EOF;
    Usage: perl $0 --msa <fasta> [options]
    --msa <file>    : msa fasta input; required
    --block <file>  : block interval input; required
    --outdir <str>  : path to outputs ($outdir)
    --prefix <str>  : output prefix ($prefix)
    --outfas <str>  : output fasta filename ($outfas)
    --outblock <str>: output blocktyping filename ($outblocktype)
    --help          : help information

notes:
    The scripts input MSA fasta data and output genotyping result of each block

    INPUT:
    - MSA fasta output with "-" representing missing sequences
    - BLOCK intervals: two 1-based columns
    - the name of the reference sequence, which should match the one used in MSA

    OUTPUT: a blocktyping table and a block haplotype fasta
    - The table output include the following columns:
      1. taxon name
      2. block 1-based start position of each block
      3. block 1-baed end position of each block
      4. Reference genotype
      5-last columns. Individual genotypes
    - The fasta output includes haplotype sequences of each block
EOF
exit;
}

# read parameters:
my ($msa, $block, $outfile);
&GetOptions("msa=s"         => \$msa,
			"block=s"       => \$block,
			"outdir=s"      => \$outdir,
			"prefix=s"      => \$prefix,
			"outfas=s"      => \$outfas,
			"outblocktype=s"=> \$outblocktype,
			"help|h"        => \$help) || &prompt;

####################################################
# check input
####################################################
if ($help) { &prompt; }

### check required input
if (!defined $msa or !defined $block) {
	print STDERR "--msa and --block are required\n";
	exit;
}

### check --outdir
if (($outdir ne ".") and (!-d $outdir)) {
	`mkdir $outdir`;
}

####################################################
# outputs
####################################################
my $path2outfas = $outdir."/".$outfas;
open(FASTA, ">", $path2outfas) || die;
my $path2outblocktype = $outdir."/".$outblocktype;
open(BLOCKTYPE, ">", $path2outblocktype) || die;

####################################################
### read alignment fasta data
####################################################
my ($seq, $seqname, %seqhash);
my (@seqnames);
open(IN, "<", $msa) || die;
while (<IN>) {
	chomp;
	if (/^>(\S+)/) {
		if (defined $seqname) {
			$seqhash{$seqname} = uc $seq;
		}
    	$seqname = $1;
		push(@seqnames, $seqname);
		$seq = "";
 	 } else {
		$seq .= $_;
	}
}
# last element:
$seqhash{$seqname} = uc $seq;
close IN;

####################################################
### read block intervals and output block sequences
####################################################
my %block_pos;
open(INTERVAL, "<", $block) || die;
while(<INTERVAL>) {
	chomp;
	my ($start, $end) = split(/\t/, $_);
	$block_pos{$start} = $end;
}
close INTERVAL;

###################################################
### determine block genotypes for all individuals
###################################################
# header
print BLOCKTYPE "Block\tStart\tEnd\tNum_haplotype";
foreach (@seqnames) {
	print BLOCKTYPE "\t$_";
}
print BLOCKTYPE "\n";

my @block_pos = sort { $a <=> $b } keys %block_pos;
if (@block_pos) { # at least one block
	# go through each block
	for (my $i=0; $i<=$#block_pos; $i++) {
		my $block_name = "B".$i;
		my $block_start = $block_pos[$i];
		my $block_end = $block_pos{$block_start};
		my %block_haplotype;
		my %block_genotype;
		# go through each sequence:
		foreach my $taxon (@seqnames) {
			my $taxon_msa_seq = $seqhash{$taxon};
			my $block_seq = substr($taxon_msa_seq, $block_start - 1, $block_end - $block_start + 1);
			$block_haplotype{$block_seq}++;
		}
		
		# genotyping each block
		my @haplotype = sort { $block_haplotype{$b} <=> $block_haplotype{$a} } keys %block_haplotype;
		
		for (my $j=0; $j<=$#haplotype; $j++) {
			if ($haplotype[$j] !~ /^-+$/) {
				my $order_geno = $j + 1;
				my $haplotype_name =  $block_name."_".$order_geno;
				$block_genotype{$haplotype[$j]} = $haplotype_name;
				print FASTA ">$haplotype_name\n$haplotype[$j]\n";
			} else {
				$block_genotype{$haplotype[$j]} = "-";
			}
		}
		
		my $num_haplotype = $#haplotype + 1;
		print BLOCKTYPE "$block_name\t$block_start\t$block_end\t$num_haplotype";
		foreach my $taxon (@seqnames) {
			my $taxon_msa_seq = $seqhash{$taxon};
			my $block_seq = substr($taxon_msa_seq, $block_start - 1, $block_end - $block_start + 1);
			my $taxon_genotype = $block_genotype{$block_seq};
			print BLOCKTYPE "\t$taxon_genotype";
		}
		print BLOCKTYPE "\n";
	}
}

close FASTA;
close BLOCKTYPE;

