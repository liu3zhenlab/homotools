#!/usr/bin/perl -w
# Author: Sanzhen Liu
# Date: 3/19/2021

use strict;
use warnings;
use Getopt::Long;
use Term::ANSIColor qw(:constants);
use FindBin;
use lib "$FindBin::Bin/../lib";
use genegtfadjust;
use gffadjust;
use seqhighlight;

my $version = "0.0.1";

my $extension_5p = 0;
my $extension_3p = 0;
my $prefix = "1_geneseq";
my ($fas, $gtf, $gene, $te_gff, $inchr, $instart, $inend, $help);
my ($cds_file, $cdna_file, $protein_file, $version_request);
my $result = &GetOptions("fas|f=s"        => \$fas,
                         "gtf|i=s"        => \$gtf,
                         "gene|g=s"       => \$gene,
                         "ext5|e=i"       => \$extension_5p,
                         "ext3|x=i"       => \$extension_3p,
                         "chr=s"          => \$inchr,
						 "start=i"        => \$instart,
						 "end=i"          => \$inend,
						 "prefix|p=s"     => \$prefix,
                         "cds|c=s"        => \$cds_file,
						 "cdna|d=s"       => \$cdna_file,
						 "protein|a=s"    => \$protein_file,
						 "te|t=s"         => \$te_gff,
						 "version|v"      => \$version_request,
						 "help|h"         => \$help
);

if ($version_request) {
	print "$version\n";
	exit;
}

### print help information if errors occur:
if ($help or !defined $fas or !defined $gtf or !defined $gene) {
	&errINF;
	exit;
}

###############################################
## preparation
################################################
# create a directory for outputs
&create_dir($prefix);

# script path:
my $scriptPath = $FindBin::Bin;
my $utilsPath = $scriptPath;

##############################################
# intermediate output
###############################################
my $ori_gtf_out = $prefix."/3.".$gene.".original.gtf";
open(ORIGTF, ">", $ori_gtf_out) || die;
my $ori_bed_out = $prefix."/3.".$gene.".original.bed";
open(ORIBED, ">", $ori_bed_out) || die;

# gene sequence and length
my $gene_fas_out = $prefix."/1.".$gene.".fasta";
my $gene_len_out = $prefix."/2.".$gene.".length";

# transcript GTF and BED
my $transcripts_dir = $prefix."/4.".$gene.".pos.adjusted.gtf.bed";
&create_dir($transcripts_dir);

# sequence with exon/cds highlighted
my $others_dir = $prefix."/5.".$gene.".others";
&create_dir($others_dir);

###########################################
# open GTF file and read gene information
###########################################
my ($gene_name, $gene_start, $gene_end, $gene_strand);
my ($chromosome, %transcripts);
my $gene_found = 0;
open(GTF, "<", $gtf) || die;
while (<GTF>) {
	if (!/^$/ and !/^#/) { # nonempty lines
		chomp;
		my @line = split(/\t/, $_);
		my $info = $line[8];
		if ($info =~ /gene_id \"(.+?)\";/) {
			$gene_name = $1;
			if ($gene_name eq $gene) {
				if (!defined $chromosome) {
					$chromosome = $line[0];
				}
				print ORIGTF "$_\n";
				$gene_found = 1;
				$gene_strand = $line[6];
				if ($gene_strand eq "+") {
					if (!defined $gene_start) {
						$gene_start = $line[3];
						$gene_end = $line[4];
					} else {
						$gene_start = &min($gene_start, $line[3]);
						$gene_end = &max($gene_end, $line[4]);
					}
				} else {
					if (!defined $gene_start) {
						$gene_start = $line[4];
						$gene_end = $line[3];
					} else {
						$gene_start = &max($gene_start, $line[4]);
						$gene_end = &min($gene_end, $line[3]);
					}
				}
			} elsif ($gene_found) { # when gene name does not match input gene name
				#&runreport("Gene was found in GTF");
				last;
			}
		}
	}
}
close GTF;
close ORIGTF;

# if the gene is not found, quit
if (!$gene_found) {
	&runreport("Gene was NOT found in GTF");
	print STDERR RED, "Exit\n", RESET;
	exit;
}

# output adjusted GTF and BED
if ($gene_strand eq "+") {
	$gene_start -= $extension_5p;
	$gene_end += $extension_3p;
} elsif ($gene_strand eq "-") {
	$gene_start += $extension_5p;
	$gene_end -= $extension_3p;
}

if ((defined $inchr) and ($inchr ne $chromosome)) {
	print STDERR RED, "Warning: --inchr is different from chr identified, which is $chromosome\n", RESET;
	exit;
}

if (defined $instart) {
	if ($gene_strand eq "+") {
		$gene_start = $instart;
	} else {
		$gene_end = $instart;
	}
}

if (defined $inend) {
	if ($gene_strand eq "+") {
		$gene_end = $inend;
	} else {
		$gene_start = $inend;
	}
}

# adjust position to a newly defined start for gene information in a GTF
# and output a position-adjusted GTF and BED file for each transcript
&genegtfadjust::genegtfadjust($ori_gtf_out, $gene_start, $transcripts_dir, $gene);

###########################################
### chromosome sequence
###########################################
my ($seq_name, $seq, $seq_len, $chr_seq);
my $chromosome_found = 0;
my %seq;
open(FAS, "<", $fas) || die;
while (<FAS>) {
	chomp;
	if (/^>(\S+)/) {
		if (defined $seq_name) {
			if ($seq_name eq $chromosome) {
				$chr_seq = $seq;
				$chromosome_found = 1;
				last;
			}
		}
		$seq_name = $1;
		$seq = '';
	} else {
		$seq .= $_;
	}
}

# last sequence:
if ((!$chromosome_found) and ($seq_name eq $chromosome)) {
	$chr_seq = $seq;
	$chromosome_found = 1;
}
close FAS;

if (!$chromosome_found) {
	#&runreport("chromosome/target sequence found");	
	print STDERR RED, "no chromosome/target sequence found\n", RESET;
	exit;
}

$seq_len = length($chr_seq);  # chromosome length
if (($gene_start > $seq_len) or ($gene_end > $seq_len)) {
	print STDERR RED, "extension beyond the chromosome range\n", RESET;
	exit;
}

###########################################
# gene sequence
###########################################
my $gene_seq;
if ($gene_end > $gene_start) {
	# strand +
	my $gene_start0 = $gene_start - 1;
	$gene_seq = substr($chr_seq, $gene_start0, $gene_end - $gene_start + 1);
	print ORIBED "$chromosome\t$gene_start0\t$gene_end\t$gene\t.\t\+\text5_$extension_5p\_ext3_$extension_3p\n";
} else {
	# strand -
	my $gene_start0 = $gene_end - 1;
	$gene_seq = substr($chr_seq, $gene_start0, $gene_start - $gene_end + 1);
	$gene_seq = &revcom($gene_seq);
	print ORIBED "$chromosome\t$gene_start0\t$gene_start\t$gene\t.\t\-\text5\:$extension_5p\_ext3\:$extension_3p\n";
}
close ORIBED;

open(GENEFAS, ">", $gene_fas_out) || die;
#print GENEFAS ">$gene\($gene_strand\)\n";
print GENEFAS ">$gene\n";
# print in a certain length per line
while (my $chunk = substr($gene_seq, 0, 80, "")) {
	print GENEFAS "$chunk\n";
}
close GENEFAS;

# fasta length
`perl $utilsPath/fastaSize.pl $gene_fas_out > $gene_len_out`;

#&runreport("  Gene sequence produced");

############################################
# output sequences with exon/cds highlighted
###########################################
#my $all_adjusted_bed = `ls -1 $transcripts_dir/*bed`;
#my @all_adjusted_bed = split("\n", $all_adjusted_bed);
#foreach my $each_abed (@all_adjusted_bed) {
#	my $each_fas_out = $each_abed;
#	$each_fas_out =~ s/.*\///g;
#	$each_fas_out =~ s/\.adjusted\.bed//g;
#	my $transcript_name = $each_fas_out;
#	my $highlighed_fas_out = $others_dir."/".$transcript_name.".highlighted.fasta";
#	seqhighlight::seqhighlight($gene_fas_out, $each_abed, $highlighed_fas_out, $transcript_name);
#}
#&runreport("  sequences with exon/cds highlights generated");

###########################################
# TE GFF
###########################################
if (defined $te_gff and -f $te_gff) {
	my $gene_te_gff = $others_dir."/".$gene.".TE.gff3";
	`bedtools intersect -a $te_gff -b $ori_bed_out -nonamecheck > $gene_te_gff`;
	gffadjust::gffadjust($others_dir, $gene_te_gff, $gene_start, $gene);
	#&runreport("  TE GFF produced");
}

###########################################
# other transcript or protein sequences
###########################################
# cds
if (defined $cds_file and -f $cds_file) {
	my $cds_out_file = $others_dir."/".$gene.".cds.fasta";
	&seqextract($cds_file, $gene, $cds_out_file);
	#&runreport("  cds sequences extracted");
}

# cdna
if (defined $cdna_file and -f $cdna_file) {
	my $cdna_out_file = $others_dir."/".$gene.".cdna.fasta";
	&seqextract($cdna_file, $gene, $cdna_out_file);
	#&runreport("  cdna/trancript sequences extracted");
}

# protein
if (defined $protein_file and -f $protein_file) {
	my $protein_out_file = $others_dir."/".$gene.".protein.fasta";
	&seqextract($protein_file, $gene, $protein_out_file);
	#&runreport("  protein sequences extracted");
}

###########################################
# modules
###########################################
### reverse and complementary
sub revcom {
	my $inseq = shift @_; 
	my $revcom = reverse($inseq);
	$revcom =~ tr/AGCTagct/TCGAtcga/;
	return $revcom;
}

### funtion to report running return
sub runreport {
	my $injob = shift;
    my $dateinfo = `date +'o %Y-%m-%d %H:%M:%S'`;
	print STDERR MAGENTA, "$dateinfo", RESET;
	print STDERR "  $injob.\n";
	#print LOG "$dateinfo  ";    
	#print LOG "  $injob.\n";
}

### minimum value
sub min {
	my @order_num = sort {$a <=> $b} @_;
	return $order_num[0];
}

### maximum value
sub max {
	my @order_num = sort {$b <=> $a} @_;
	return $order_num[0];
}

# create a directory
sub create_dir {
	my $dir_to_create = shift;
	if (-d $dir_to_create) {
		print STDERR RED, "Warning: the directory $dir_to_create exists.\n", RESET;
	} else {
		`mkdir $dir_to_create`;
	}
}

# extract sequences based on sequence names and print them
sub seqextract {
	my ($infas, $ingene, $outfas) = @_;
	my (%inseq, $inseq, $inseq_name, $hitseq);
	open(OUTFAS, ">", $outfas) || die;
	open(INFAS, "<", $infas) || die;
	while (<INFAS>) {
		chomp;
		if (/^>(\S+)/) {
			if (defined $inseq_name) {
				if ($inseq_name =~ $ingene) {
					$hitseq = $inseq;
					print OUTFAS ">$inseq_name\n";
					while (my $chunk = substr($hitseq, 0, 80, "")) {
						print OUTFAS "$chunk\n";
					}
				}
			}
			$inseq_name = $1;
			$inseq = '';
		} else {
			$inseq .= $_;
		}
	}
	# last sequence:
	if ($inseq_name =~ $ingene) {
		$hitseq = $inseq;
		print OUTFAS ">$inseq_name\n";
		while (my $chunk = substr($hitseq, 0, 80, "")) {
			print OUTFAS "$chunk\n";
		}
	}
	close INFAS;
	close OUTFAS;
}


### Usage information
sub errINF {
	print <<EOF;
Usage: geneseq --fas <fasta> --gene <genename> --gtf <GTF> [options]
- extract fasta sequence and gtf information for the input gene
- produce a new gtf with adjusted positions relative to gene fasta
- also can extract TE, cds, cdna, protein sequences of the genes
[Options]
  --fas|f <file>      : reference fasta file (required)
  --gene|i <str>      : gene name (required)
  --gtf|g <file>      : GTF file (required)
  --prefix|p <str>    : prefix name for outputs ($prefix)
  --ext5|e <num>      : bp extension from 5' site ($extension_5p)
  --ext3|x <num>      : bp extension from 3' site ($extension_3p)
  --te|t <file>       : TE GTF/GFF file
  --cds|c <file>      : a fasta file containing coding sequences of the gene (optional)
  --cdna|d <file>     : a fasta file containing transcript sequences of the gene (optional)
  --protein|a <file>  : a fasta file containing protin sequences of the gene (optional)
  --help|h            : help information
EOF
	exit;
}

